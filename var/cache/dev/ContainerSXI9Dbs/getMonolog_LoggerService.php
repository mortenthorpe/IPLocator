<?php

namespace ContainerSXI9Dbs;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMonolog_LoggerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->privates['monolog.logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(($container->privates['Monolog\\Processor\\PsrLogMessageProcessor'] ?? ($container->privates['Monolog\\Processor\\PsrLogMessageProcessor'] = new \Monolog\Processor\PsrLogMessageProcessor())));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\WebProcessor'] ?? ($container->privates['Monolog\\Processor\\WebProcessor'] = new \Monolog\Processor\WebProcessor())));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\MemoryProcessor'] ?? ($container->privates['Monolog\\Processor\\MemoryProcessor'] = new \Monolog\Processor\MemoryProcessor())));
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? $container->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? $container->getMonolog_Handler_MainService()));

        return $instance;
    }
}
